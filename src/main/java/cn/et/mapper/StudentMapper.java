package cn.et.mapper;

import cn.et.entity.Student;
import cn.et.entity.StudentExample;
import java.util.List;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

public interface StudentMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table student
     *
     * @mbg.generated Fri Mar 15 17:30:38 CST 2019
     */
    @SelectProvider(type=StudentSqlProvider.class, method="countByExample")
    long countByExample(StudentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table student
     *
     * @mbg.generated Fri Mar 15 17:30:38 CST 2019
     */
    @DeleteProvider(type=StudentSqlProvider.class, method="deleteByExample")
    int deleteByExample(StudentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table student
     *
     * @mbg.generated Fri Mar 15 17:30:38 CST 2019
     */
    @Insert({
        "insert into student (sid, sname, ",
        "gid, sage, ssex)",
        "values (#{sid,jdbcType=VARCHAR}, #{sname,jdbcType=VARCHAR}, ",
        "#{gid,jdbcType=VARCHAR}, #{sage,jdbcType=VARCHAR}, #{ssex,jdbcType=VARCHAR})"
    })
    int insert(Student record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table student
     *
     * @mbg.generated Fri Mar 15 17:30:38 CST 2019
     */
    @InsertProvider(type=StudentSqlProvider.class, method="insertSelective")
    int insertSelective(Student record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table student
     *
     * @mbg.generated Fri Mar 15 17:30:38 CST 2019
     */
    @SelectProvider(type=StudentSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="sid", property="sid", jdbcType=JdbcType.VARCHAR),
        @Result(column="sname", property="sname", jdbcType=JdbcType.VARCHAR),
        @Result(column="gid", property="gid", jdbcType=JdbcType.VARCHAR),
        @Result(column="sage", property="sage", jdbcType=JdbcType.VARCHAR),
        @Result(column="ssex", property="ssex", jdbcType=JdbcType.VARCHAR)
    })
    List<Student> selectByExampleWithRowbounds(StudentExample example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table student
     *
     * @mbg.generated Fri Mar 15 17:30:38 CST 2019
     */
    @SelectProvider(type=StudentSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="sid", property="sid", jdbcType=JdbcType.VARCHAR),
        @Result(column="sname", property="sname", jdbcType=JdbcType.VARCHAR),
        @Result(column="gid", property="gid", jdbcType=JdbcType.VARCHAR),
        @Result(column="sage", property="sage", jdbcType=JdbcType.VARCHAR),
        @Result(column="ssex", property="ssex", jdbcType=JdbcType.VARCHAR)
    })
    List<Student> selectByExample(StudentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table student
     *
     * @mbg.generated Fri Mar 15 17:30:38 CST 2019
     */
    @UpdateProvider(type=StudentSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") Student record, @Param("example") StudentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table student
     *
     * @mbg.generated Fri Mar 15 17:30:38 CST 2019
     */
    @UpdateProvider(type=StudentSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") Student record, @Param("example") StudentExample example);
}